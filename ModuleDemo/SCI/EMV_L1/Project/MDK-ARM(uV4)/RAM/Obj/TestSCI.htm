<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\RAM\Obj\TestSCI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\RAM\Obj\TestSCI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 07 20:16:33 2019
<BR><P>
<H3>Maximum Stack Usage =       2860 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; loop_back &rArr; ReadRandParm &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1d]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[12]">CRYPT0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[21]">DCMI_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[26]">IMG_COP_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[d]">LCD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[22]">MSR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[e]">SCI0_IRQHandler</a> from mhscpu_emv_hard.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1b]">SENSOR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[11]">SPI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[25]">SPI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1e]">SSC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_mhscpu.o(.text) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[13]">TIM0_0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[14]">TIM0_1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[15]">TIM0_2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[16]">TIM0_3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1f]">TIM0_4_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[20]">TIM0_5_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1c]">TRNG_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[c]">USBDMA_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[b]">USB_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[29]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[2a]">fputc</a> from main.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[27]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[59]"></a>__asm___16_mhscpu_sysctrl_c_220ebcab__SYSCTRL_Sleep</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnterSleep
</UL>

<P><STRONG><a name="[2d]"></a>NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2860<LI>Call Chain = main &rArr; loop_back &rArr; ReadRandParm &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_lib_time
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_lib_date
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_get_version
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_ConfigEMV
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[53]"></a>assert_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WakeModeConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WakeEvenConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullUpCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnterSleep
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphResetCmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>

<P><STRONG><a name="[2a]"></a>fputc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[3b]"></a>fgetc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_RecvChar
</UL>

<P><STRONG><a name="[32]"></a>uart_Config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_Config &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>uart_IsSendFinish</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>uart_RecvFlush</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>uart_SendChar</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a4]"></a>uart_SendCharBlock</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>uart_SendBuff</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>uart_RecvChar</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>print_hex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[40]"></a>timer0_1_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[42]"></a>Timer0_0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[45]"></a>timer0_1_IsTimeout</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test_emv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
</UL>

<P><STRONG><a name="[43]"></a>timer0_1_start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, test_emv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer0_1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
</UL>

<P><STRONG><a name="[44]"></a>delay_Ms</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, test_emv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay_Ms &rArr; timer0_1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_IsTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_Ns
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[46]"></a>wait_Ns</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[47]"></a>wait_ChangeNs</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, test_emv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wait_ChangeNs &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_IsTimeout
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_RecvChar
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[48]"></a>PsamColdRest</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, test_loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PsamColdRest &rArr; emv_atr_analyser &rArr; emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[4e]"></a>ReadRandParm</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, test_loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2772<LI>Call Chain = ReadRandParm &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[39]"></a>loop_back</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, test_loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2844<LI>Call Chain = loop_back &rArr; ReadRandParm &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandParm
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsamColdRest
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_RecvChar
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CRYPT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IMG_COP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>MSR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SENSOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>NVIC_Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[54]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[55]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[56]"></a>SYSCTRL_AHBPeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f]"></a>SYSCTRL_APBPeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>SYSCTRL_AHBPeriphResetCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30]"></a>SYSCTRL_APBPeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SPI_Reset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_UART_Reset
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>SYSCTRL_EnterSleep</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_mhscpu_sysctrl_c_220ebcab__SYSCTRL_Sleep
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[a6]"></a>SYSCTRL_GetWakeupFlag1Status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>SYSCTRL_GetWakeupFlag2Status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>SYSCTRL_SYSCLKSourceSelect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_SYSCLKSourceSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>SYSCTRL_PLLConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>SYSCTRL_HCLKConfig</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_HCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5c]"></a>SYSCTRL_PCLKConfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a8]"></a>SYSCTRL_GetClocksFreq</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>SYSCTRL_DMA_ChannelConfig</STRONG> (Thumb, 408 bytes, Stack size 12 bytes, mhscpu_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>SYSCTRL_SPI_Reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>

<P><STRONG><a name="[aa]"></a>SYSCTRL_SPI_MasterSlaveModeSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>SYSCTRL_UART_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>

<P><STRONG><a name="[60]"></a>GPIO_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>

<P><STRONG><a name="[33]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>GPIO_Init</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Config
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_ReadInputData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>GPIO_SetBits</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ResetBits</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[65]"></a>GPIO_WriteBit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[66]"></a>GPIO_Write</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[67]"></a>GPIO_PullUpCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[ae]"></a>GPIO_WakeEvenDeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>GPIO_WakeEvenConfig</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[69]"></a>GPIO_WakeModeConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[92]"></a>isvalid_channel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
</UL>

<P><STRONG><a name="[6a]"></a>emv_sci_reset</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_ConfigEMV
</UL>

<P><STRONG><a name="[4a]"></a>select_slot</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsamColdRest
</UL>

<P><STRONG><a name="[af]"></a>check_dev</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>SCI_ConfigEMV</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCI_ConfigEMV
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_sci_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>SCI_MatchBaudReg</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCI_MatchBaudReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
</UL>

<P><STRONG><a name="[93]"></a>emv_disturb_interruption</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
</UL>

<P><STRONG><a name="[96]"></a>emv_hard_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>

<P><STRONG><a name="[6b]"></a>emv_hard_config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_MatchBaudReg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
</UL>

<P><STRONG><a name="[94]"></a>emv_hard_detect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
</UL>

<P><STRONG><a name="[4c]"></a>emv_hard_cold_reset</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_cold_reset &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsamColdRest
</UL>

<P><STRONG><a name="[6f]"></a>emv_hard_warm_reset</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_warm_reset &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[70]"></a>emv_hard_power_dump</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_hard_power_dump &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
</UL>

<P><STRONG><a name="[4b]"></a>emv_hard_power_pump</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emv_hard_power_pump &rArr; emv_hard_power_dump &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_core_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsamColdRest
</UL>

<P><STRONG><a name="[e]"></a>SCI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCI0_IRQHandler &rArr; SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SCI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>emv_hard_xmit</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
</UL>

<P><STRONG><a name="[b0]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_mhscpu.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_mhscpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SYSCTRL_PCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_iblock_pack
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsamColdRest
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_getv
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b8]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[35]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandParm
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsamColdRest
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_Ns
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ba]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[87]"></a>adjust_timeout_type</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, emv_patch.o(i.adjust_timeout_type))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
</UL>

<P><STRONG><a name="[85]"></a>di_const_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emv_fidi_table.o(i.di_const_table))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
</UL>

<P><STRONG><a name="[4d]"></a>emv_atr_analyser</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, emv_core.o(i.emv_atr_analyser))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emv_atr_analyser &rArr; emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsamColdRest
</UL>

<P><STRONG><a name="[83]"></a>emv_atr_parse</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, emv_core.o(i.emv_atr_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_atr_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[71]"></a>emv_core_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emv_queue.o(i.emv_core_init))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
</UL>

<P><STRONG><a name="[97]"></a>emv_core_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, emv_queue.o(i.emv_core_register))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>

<P><STRONG><a name="[86]"></a>emv_queue_empty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, emv_queue.o(i.emv_queue_empty))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
</UL>

<P><STRONG><a name="[8a]"></a>emv_queue_fill</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, emv_queue.o(i.emv_queue_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emv_queue_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
</UL>

<P><STRONG><a name="[6d]"></a>emv_queue_flush</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emv_queue.o(i.emv_queue_flush))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
</UL>

<P><STRONG><a name="[81]"></a>emv_queue_spill</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, emv_queue.o(i.emv_queue_spill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_timeout_type
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
</UL>

<P><STRONG><a name="[88]"></a>emv_t0_exchange</STRONG> (Thumb, 888 bytes, Stack size 80 bytes, emv_core.o(i.emv_t0_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = emv_t0_exchange &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_tell_case
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[8b]"></a>emv_t1_block_recv</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, emv_core.o(i.emv_t1_block_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emv_t1_block_recv &rArr; emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_compute_lrc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[8d]"></a>emv_t1_block_xmit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, emv_core.o(i.emv_t1_block_xmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_compute_lrc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[8c]"></a>emv_t1_compute_lrc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, emv_core.o(i.emv_t1_compute_lrc))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
</UL>

<P><STRONG><a name="[8e]"></a>emv_t1_exchange</STRONG> (Thumb, 906 bytes, Stack size 1608 bytes, emv_core.o(i.emv_t1_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_iblock_pack
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[8f]"></a>emv_t1_extract</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, emv_core.o(i.emv_t1_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emv_t1_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_tell_case
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[90]"></a>emv_t1_iblock_pack</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, emv_core.o(i.emv_t1_iblock_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emv_t1_iblock_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[91]"></a>emv_t1_ifsd_request</STRONG> (Thumb, 190 bytes, Stack size 528 bytes, emv_core.o(i.emv_t1_ifsd_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = emv_t1_ifsd_request &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[89]"></a>emv_tell_case</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emv_core.o(i.emv_tell_case))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
</UL>

<P><STRONG><a name="[84]"></a>fi_const_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emv_fidi_table.o(i.fi_const_table))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
</UL>

<P><STRONG><a name="[51]"></a>iso7816_detect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, iso7816_3.o(i.iso7816_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iso7816_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_detect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[50]"></a>iso7816_device_init</STRONG> (Thumb, 220 bytes, Stack size 136 bytes, iso7816_3.o(i.iso7816_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iso7816_device_init &rArr; sci_getv
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_core_register
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_getv
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[4f]"></a>iso7816_exchange</STRONG> (Thumb, 262 bytes, Stack size 1072 bytes, iso7816_3.o(i.iso7816_exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 2756<LI>Call Chain = iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandParm
</UL>

<P><STRONG><a name="[36]"></a>iso7816_get_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iso7816_3.o(i.iso7816_get_version))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>iso7816_init</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, iso7816_3.o(i.iso7816_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = iso7816_init &rArr; emv_t1_ifsd_request &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[37]"></a>iso7816_lib_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iso7816_3.o(i.iso7816_lib_date))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>iso7816_lib_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iso7816_3.o(i.iso7816_lib_time))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>iso_atr_parse</STRONG> (Thumb, 836 bytes, Stack size 40 bytes, emv_patch.o(i.iso_atr_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iso_atr_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[9a]"></a>iso_pps_procedure</STRONG> (Thumb, 546 bytes, Stack size 56 bytes, emv_patch.o(i.iso_pps_procedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = iso_pps_procedure &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[95]"></a>sci_getv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iso7816_3.o(i.sci_getv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sci_getv
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3e]"></a>uart_Resume</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test_emv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_0_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_stop
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_GetGPIONum</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_GetGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WakeEvenConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>

<P><STRONG><a name="[6e]"></a>SET_ERR</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
</UL>

<P><STRONG><a name="[73]"></a>FLUSH_QUEUE</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>SCIx_IRQHandler</STRONG> (Thumb, 1078 bytes, Stack size 32 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLUSH_QUEUE
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI0_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[80]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
